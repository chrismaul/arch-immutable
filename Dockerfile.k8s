FROM archlinux/base AS base
ARG ARCH_MIRROR=http://mirror.math.princeton.edu/pub/archlinux
RUN sed -i "1s|^|Server = $ARCH_MIRROR/\$repo/os/\$arch\n|" /etc/pacman.d/mirrorlist

RUN echo "[archzfs]" >> /etc/pacman.conf && \
  echo "Server = https://archzfs.com/\$repo/\$arch" >> /etc/pacman.conf && \
  pacman-key --init && \
  pacman-key -r F75D9D76 && \
  pacman-key --finger F75D9D76 && \
  pacman-key --lsign-key F75D9D76

COPY build /build

RUN pacman -Syyu --needed --noconfirm $(cat /build/base.txt) $(cat /build/k8s.txt)

RUN pacman -U /build/packages/k8s-aur/* --noconfirm --needed

COPY base /

COPY k8s /

RUN systemctl enable setup-customize-initrd.service && \
  systemctl enable setup-profile-home.service && \
  systemctl enable coldplug.service

RUN for i in \
  etc/environment \
  etc/xdg/ \
  etc/cloud/ \
  etc/security/ \
  etc/ca-certificates/ \
  etc/ssl/ \
  etc/ssh/ \
  etc/pam.d/ \
  etc/profile.d/ \
  etc/bash.bashrc \
  etc/ethertypes \
  etc/netconfig \
  etc/services \
  etc/rpc \
  ; \
do \
  [ -e "/$i" ] && rsync -av /$i /usr/share/factory/$i ; \
done

RUN echo "HostKey /mnt/data/etc/ssh/ssh_host_rsa_key " >> /usr/share/factory/etc/ssh/sshd_config && \
  echo "HostKey /mnt/data/etc/ssh/ssh_host_ecdsa_key">> /usr/share/factory/etc/ssh/sshd_config && \
  echo "HostKey /mnt/data/etc/ssh/ssh_host_ed25519_key" >> /usr/share/factory/etc/ssh/sshd_config && \
  echo "ChallengeResponseAuthentication no" >> /usr/share/factory/etc/ssh/sshd_config && \
  echo "PasswordAuthentication no" >> /usr/share/factory/etc/ssh/sshd_config && \
  echo "PermitRootLogin no" >> /usr/share/factory/etc/ssh/sshd_config && \
  sed -i -e "s|UsePAM .*|UsePAM no|" /usr/share/factory/etc/ssh/sshd_config

RUN mkdir -p /tmp/download
# export CRI_VERSION="$( curl -s https://api.github.com/repos/kubernetes-sigs/cri-tools/releases | jq -r " map(select(.prerelease == false)) | sort_by(.tag_name) | reverse | .[0].tag_name" )" && \
RUN export CRI_URL=$(curl -s https://api.github.com/repos/kubernetes-sigs/cri-tools/releases | jq -r 'map(select(.prerelease == false)) | sort_by(.tag_name) | reverse | .[0].assets | map(select(.name | test("^crictl-.*linux-amd64.tar.gz$"))) |.[0].browser_download_url ') && \
  curl -L $CRI_URL -o /tmp/download/cri.tar.gz && \
  tar zxvf /tmp/download/cri.tar.gz -C /usr/bin && \
  rm -f /tmp/download/cri.tar.gz

#ARG CONTAINERD_VERS=1.3.2
RUN export CONTAINERD_URL=$(curl -s https://api.github.com/repos/containerd/containerd/releases | jq -r 'map(select(.prerelease == false)) | sort_by(.tag_name) | reverse | .[0].assets | map(select(.name | test("^containerd-.*linux-amd64.tar.gz$"))) |.[0].browser_download_url ') && \
  curl -L $CONTAINERD_URL -o /tmp/download/containerd.tar.gz && \
  tar xf /tmp/download/containerd.tar.gz -C /usr && \
  curl -L https://github.com/containerd/containerd/raw/master/containerd.service -o /usr/lib/systemd/system/containerd.service && \
  sed -i -e 's|/usr/local/bin/containerd|/usr/bin/containerd|' /usr/lib/systemd/system/containerd.service && \
  rm /tmp/download/containerd.tar.gz

#ARG KUBE_VERS=1.16.4
RUN export KUBE_VERS="$(curl -s https://api.github.com/repos/kubernetes/kubernetes/releases | jq -r " map(select(.prerelease == false)) | sort_by(.tag_name) | reverse | .[0].tag_name")" && \
  curl -L https://dl.k8s.io/$KUBE_VERS/kubernetes-server-linux-amd64.tar.gz -o /tmp/download/kube.tar.gz && \
  tar xf /tmp/download/kube.tar.gz --strip-components=2 -C /usr \
    kubernetes/server/bin/kubelet \
    kubernetes/server/bin/kube-scheduler \
    kubernetes/server/bin/mounter \
    kubernetes/server/bin/apiextensions-apiserver \
    kubernetes/server/bin/kube-proxy \
    kubernetes/server/bin/kubeadm \
    kubernetes/server/bin/kube-controller-manager \
    kubernetes/server/bin/kube-apiserver \
    kubernetes/server/bin/kubectl

#ARG RUNC_VERS=v1.0.0-rc9
RUN cd /tmp/download && \
  curl -s https://api.github.com/repos/opencontainers/runc/releases | jq -r 'map(select(.prerelease == false)) | sort_by(.tag_name) | reverse | .[0].assets[] | .browser_download_url ' | xargs -n 1 curl -OL  && \
  sha256sum -c runc.sha256sum --ignore-missing && \
  mv runc.amd64 /usr/bin/runc && \
  chmod 755 /usr/bin/runc
RUN rm -r /tmp/download

RUN echo \
  mnt-data.mount \
  systemd-networkd.service \
  systemd-resolved.service \
  sshd.service \
  kubelet.service \
  containerd.service \
  cloud-init.service \
  cloud-final.service \
  zfs-import-scan.service \
  | xargs -n 1 systemctl enable

RUN rsync --ignore-existing -av /etc/systemd/ /usr/lib/systemd/

RUN build-initramfs /boot/initramfs-dracut.img
RUN ln -s /mnt/data/opt-cni /opt/cni && ls -lah /opt && ln -s /mnt/data/kube-exec /usr/libexec

RUN /build/finalize-build.sh
RUN rm -r /build

ARG VERS=dev
RUN update-os-id-vers k8s $VERS
